<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/aop   
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd   
        http://www.springframework.org/schema/beans   
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd   
        http://www.springframework.org/schema/context   
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/tx   
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
   
    
 
   
   <bean class="ai.yc.common.core.service.impl.InjectBeanSelfProcessor"></bean>
   
   <bean id="logServiceAspect" class="org.jview.fwork.basedata.logger.LogServiceAspect"></bean>
	 <aop:aspectj-autoproxy proxy-target-class="true" >  
	     <aop:include name="logServiceAspect" />  
	 </aop:aspectj-autoproxy>  
	 

   <bean id ="taskExecutor"  class ="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor" > 
	    <property name ="corePoolSize" value ="5" /> 
	    <property name ="keepAliveSeconds" value ="300" /> 
	    <property name ="maxPoolSize" value ="10" /> 
	    <property name ="queueCapacity" value ="25" /> 
	  </bean> 
	
	<!-- 配置要扫描的包 -->
	<context:component-scan base-package="org.jview.fwork.schedule,org.jview.fwork.basedata" />
	
	<!-- 基于Druid数据库链接池的数据源配置 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性driverClassName、 url、user、password -->
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<!-- 通常来说，只需要修改initialSize、minIdle、maxActive -->
		<property name="initialSize" value="2" />
		<property name="minIdle" value="2" />
		<property name="maxActive" value="30" />
		<property name="testWhileIdle" value="false" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="5000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="30000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 解密密码必须要配置的项 -->
		<property name="filters" value="config" />
		<property name="connectionProperties" value="config.decrypt=false" />
	</bean>
	
	

	<!-- 将数据源映射到sqlSessionFactory中 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="org.jview.fwork.basedata.model"/>
		<property name="plugins">
            <array>
            	<bean id="sqlInterceptor" class="org.jview.fwork.basedata.logger.SqlInterceptor">
            		<property name="logSqlManager" ref="logSqlManager"></property>
            		<property name="properties">
						<props>  
			                <prop key="sql.logSqlIgnore">select_seq,select_count</prop> 
			                <prop key="sql.ignoreKey">
			                	FROM tf_sysconfig WHERE ( IF_dEL = 0 and STATUS = 1 )
			                </prop>
			                <prop key="sql.ignoreSqlId">
			                	ModelMapper:selectByExample
			                	LogDbMapper:insert
			                </prop>
			            </props>
			         </property>
            	</bean>
                <bean class="com.github.pagehelper.PageHelper">
                    <!-- 这里的几个配置主要演示如何使用，如果不理解，一定要去掉下面的配置 -->
                    <property name="properties">
                        <value>
                            dialect=mysql
                            reasonable=true
                            supportMethodsArguments=true
                            params=count=countSql
                            autoRuntimeDialect=true
                        </value>
                    </property>
                </bean>
            </array>
        </property>
	</bean>

	<!-- SqlSession模板类实例 -->
	<bean id="sessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="close">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	
	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
	  <property name="basePackage" value="org.jview.fwork.basedata.mapper" />
	  <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	  <!-- example处理，所有表的实体属性忽略，即不进行select,insert,update处理 -->
	  <property name="propertyIgnoreAll" value="currentUserId,currentUser,version,create_disp,modify_disp"/>
	  <!-- example处理，具体表的实体属性忽略
	  	格式：className=ignoreProperties
	  	说明：一个类一行，属性多个以“,”隔开
	   -->
	  <property name="propertyIgnore">
	  	<value>
	  		org.jview.fwork.basedata.model.LogDbPO=code,name,ifDel,status,modifyDate,modifyUser,createUser
	  		org.jview.fwork.basedata.model.LogMsgPO=code,name,ifDel,status,modifyDate,modifyUser
	  		org.jview.fwork.basedata.model.LogMsgDetailPO=code,name,ifDel,status,modifyDate,modifyUser,createUser,createDate
	  		org.jview.fwork.basedata.model.ModelPO=code,name,ifDel,status,modifyDate,modifyUser,createUser
	  	</value>
	  </property>
	  <!-- 
	  <property name="markerInterface" value="org.jview.fwork.basedata.util.MyMapper"/>
	   -->
	</bean>

	<!--======= 事务配置 Begin ================= -->
	<!-- 事务管理器（由Spring管理MyBatis的事务） -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 关联数据源 -->
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!--======= 事务配置 End =================== -->
	
	<!-- 
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>
 	-->

	<!--  -->
	<aop:config>
        <aop:pointcut id="appService" expression="execution(* org.jview.fwork.basedata.service..*Service*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="appService"/>
    </aop:config>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="select*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>
    
     
   
</beans>